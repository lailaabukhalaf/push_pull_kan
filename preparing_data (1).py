# -*- coding: utf-8 -*-
"""preparing_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lla7vROhS4E2T26b61pyif7vAhrZ3HpY
"""

def prepare_iris_dataset(
    test_size: float = 0.2,
    random_state: int = 42,
    batch_size: int = 16,
    shuffle: bool = True,
    return_test_loader: bool = False,
    num_workers: int = 0,):

    iris = load_iris()
    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
    df['target'] = iris.target
    df['target_name'] = df['target'].map(dict(enumerate(iris.target_names)))

    print("Target names:", iris.target_names)
    print("Samples per class:\n", df.value_counts('target_name'))

    X = df[iris.feature_names].to_numpy()
    y = df['target'].to_numpy()

    # Train-test split (stratified so each class has proportional samples)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_state, stratify=y
    )

    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Convert to float32 for model output must be in int64
    X_train_torch = torch.from_numpy(X_train_scaled.astype(np.float32))
    X_test_torch = torch.from_numpy(X_test_scaled.astype(np.float32))
    y_train_torch = torch.from_numpy(y_train.astype(np.int64))
    y_test_torch = torch.from_numpy(y_test.astype(np.int64))

    dataset = {
        "train_input": X_train_torch,
        "train_label": y_train_torch,
        "test_input": X_test_torch,
        "test_label": y_test_torch
    }



    # loaders
    train_ds = TensorDataset(dataset["train_input"], dataset["train_label"])
    train_loader = DataLoader(
        train_ds, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers
    )

    if return_test_loader:
        test_ds = TensorDataset(dataset["test_input"], dataset["test_label"])
        test_loader = DataLoader(
            test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers
        )
        return dataset, train_loader, test_loader

    return dataset, train_loader

import random
def set_seed(seed=42):
    random.seed(seed)                      # Python random
    np.random.seed(seed)                   # NumPy random
    torch.manual_seed(seed)                 # PyTorch CPU
    torch.cuda.manual_seed_all(seed)        # PyTorch GPU
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False